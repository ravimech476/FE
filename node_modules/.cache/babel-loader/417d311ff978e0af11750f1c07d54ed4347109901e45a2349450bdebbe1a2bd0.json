{"ast":null,"code":"import api from './api';\nconst authService = {\n  // Register new user\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  // Login user\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  // Logout user\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  // Get current user profile\n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n  // Update user profile\n  updateProfile: async userData => {\n    const response = await api.put('/auth/profile', userData);\n    if (response.data.user) {\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  // Change password\n  changePassword: async passwordData => {\n    const response = await api.post('/auth/change-password', passwordData);\n    return response.data;\n  },\n  // Get current user from localStorage\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    if (userStr) return JSON.parse(userStr);\n    return null;\n  },\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  },\n  // Get all users (admin only)\n  getAllUsers: async filters => {\n    const response = await api.get('/auth/users', {\n      params: filters\n    });\n    return response.data;\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","register","userData","response","post","data","token","localStorage","setItem","JSON","stringify","user","login","credentials","logout","removeItem","getProfile","get","updateProfile","put","changePassword","passwordData","getCurrentUser","userStr","getItem","parse","isAuthenticated","getAllUsers","filters","params"],"sources":["D:/PROJECTS/FE/src/services/authService.js"],"sourcesContent":["import api from './api';\n\nconst authService = {\n    // Register new user\n    register: async (userData) => {\n        const response = await api.post('/auth/register', userData);\n        if (response.data.token) {\n            localStorage.setItem('token', response.data.token);\n            localStorage.setItem('user', JSON.stringify(response.data.user));\n        }\n        return response.data;\n    },\n\n    // Login user\n    login: async (credentials) => {\n        const response = await api.post('/auth/login', credentials);\n        if (response.data.token) {\n            localStorage.setItem('token', response.data.token);\n            localStorage.setItem('user', JSON.stringify(response.data.user));\n        }\n        return response.data;\n    },\n\n    // Logout user\n    logout: () => {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n    },\n\n    // Get current user profile\n    getProfile: async () => {\n        const response = await api.get('/auth/profile');\n        return response.data;\n    },\n\n    // Update user profile\n    updateProfile: async (userData) => {\n        const response = await api.put('/auth/profile', userData);\n        if (response.data.user) {\n            localStorage.setItem('user', JSON.stringify(response.data.user));\n        }\n        return response.data;\n    },\n\n    // Change password\n    changePassword: async (passwordData) => {\n        const response = await api.post('/auth/change-password', passwordData);\n        return response.data;\n    },\n\n    // Get current user from localStorage\n    getCurrentUser: () => {\n        const userStr = localStorage.getItem('user');\n        if (userStr) return JSON.parse(userStr);\n        return null;\n    },\n\n    // Check if user is authenticated\n    isAuthenticated: () => {\n        return !!localStorage.getItem('token');\n    },\n\n    // Get all users (admin only)\n    getAllUsers: async (filters) => {\n        const response = await api.get('/auth/users', { params: filters });\n        return response.data;\n    }\n};\n\nexport default authService;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,GAAG;EAChB;EACAC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC1B,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;IAC3D,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACrBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;IACpE;IACA,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAO,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC1B,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,aAAa,EAAES,WAAW,CAAC;IAC3D,IAAIV,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACrBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;IACpE;IACA,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAS,MAAM,EAAEA,CAAA,KAAM;IACVP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;EACnC,CAAC;EAED;EACAC,UAAU,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACkB,GAAG,CAAC,eAAe,CAAC;IAC/C,OAAOd,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAa,aAAa,EAAE,MAAOhB,QAAQ,IAAK;IAC/B,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACoB,GAAG,CAAC,eAAe,EAAEjB,QAAQ,CAAC;IACzD,IAAIC,QAAQ,CAACE,IAAI,CAACM,IAAI,EAAE;MACpBJ,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;IACpE;IACA,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAe,cAAc,EAAE,MAAOC,YAAY,IAAK;IACpC,MAAMlB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,uBAAuB,EAAEiB,YAAY,CAAC;IACtE,OAAOlB,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAiB,cAAc,EAAEA,CAAA,KAAM;IAClB,MAAMC,OAAO,GAAGhB,YAAY,CAACiB,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAID,OAAO,EAAE,OAAOd,IAAI,CAACgB,KAAK,CAACF,OAAO,CAAC;IACvC,OAAO,IAAI;EACf,CAAC;EAED;EACAG,eAAe,EAAEA,CAAA,KAAM;IACnB,OAAO,CAAC,CAACnB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;EAC1C,CAAC;EAED;EACAG,WAAW,EAAE,MAAOC,OAAO,IAAK;IAC5B,MAAMzB,QAAQ,GAAG,MAAMJ,GAAG,CAACkB,GAAG,CAAC,aAAa,EAAE;MAAEY,MAAM,EAAED;IAAQ,CAAC,CAAC;IAClE,OAAOzB,QAAQ,CAACE,IAAI;EACxB;AACJ,CAAC;AAED,eAAeL,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}