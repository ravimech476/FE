{"ast":null,"code":"import api from './api';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst leaderService = {\n  // Public - Get all active leaders\n  getAllLeaders: async () => {\n    try {\n      const response = await api.get('/leaders');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching leaders:', error);\n      throw error;\n    }\n  },\n  // Admin - Get all leaders (including inactive)\n  getAllLeadersForAdmin: async () => {\n    try {\n      const response = await api.get('/leaders/admin/all');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching leaders for admin:', error);\n      throw error;\n    }\n  },\n  // Get single leader\n  getLeader: async id => {\n    try {\n      const response = await api.get(`/leaders/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching leader:', error);\n      throw error;\n    }\n  },\n  // Admin - Create leader with image\n  createLeader: async leaderData => {\n    try {\n      const formData = new FormData();\n      formData.append('name', leaderData.name);\n      formData.append('title', leaderData.title);\n      if (leaderData.description) {\n        formData.append('description', leaderData.description);\n      }\n      if (leaderData.icon) {\n        formData.append('icon', leaderData.icon);\n      }\n      if (leaderData.display_order !== undefined) {\n        formData.append('display_order', leaderData.display_order);\n      }\n      if (leaderData.status) {\n        formData.append('status', leaderData.status);\n      }\n      if (leaderData.image) {\n        formData.append('image', leaderData.image);\n      }\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/api/leaders`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create leader');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating leader:', error);\n      throw error;\n    }\n  },\n  // Admin - Update leader with image\n  updateLeader: async (id, leaderData) => {\n    try {\n      const formData = new FormData();\n      formData.append('name', leaderData.name);\n      formData.append('title', leaderData.title);\n      if (leaderData.description) {\n        formData.append('description', leaderData.description);\n      }\n      if (leaderData.icon) {\n        formData.append('icon', leaderData.icon);\n      }\n      if (leaderData.display_order !== undefined) {\n        formData.append('display_order', leaderData.display_order);\n      }\n      if (leaderData.status) {\n        formData.append('status', leaderData.status);\n      }\n      if (leaderData.image) {\n        formData.append('image', leaderData.image);\n      }\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${API_URL}/api/leaders/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update leader');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating leader:', error);\n      throw error;\n    }\n  },\n  // Admin - Delete leader\n  deleteLeader: async id => {\n    try {\n      const response = await api.delete(`/leaders/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting leader:', error);\n      throw error;\n    }\n  },\n  // Admin - Update display order\n  updateDisplayOrder: async updates => {\n    try {\n      const response = await api.put('/leaders/admin/display-order', {\n        updates\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating display order:', error);\n      throw error;\n    }\n  }\n};\nexport default leaderService;","map":{"version":3,"names":["api","API_URL","process","env","REACT_APP_API_URL","leaderService","getAllLeaders","response","get","data","error","console","getAllLeadersForAdmin","getLeader","id","createLeader","leaderData","formData","FormData","append","name","title","description","icon","display_order","undefined","status","image","token","localStorage","getItem","fetch","method","headers","body","ok","json","Error","updateLeader","deleteLeader","delete","updateDisplayOrder","updates","put"],"sources":["D:/PROJECTS/FE/src/services/leaderService.js"],"sourcesContent":["import api from './api';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nconst leaderService = {\n    // Public - Get all active leaders\n    getAllLeaders: async () => {\n        try {\n            const response = await api.get('/leaders');\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching leaders:', error);\n            throw error;\n        }\n    },\n\n    // Admin - Get all leaders (including inactive)\n    getAllLeadersForAdmin: async () => {\n        try {\n            const response = await api.get('/leaders/admin/all');\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching leaders for admin:', error);\n            throw error;\n        }\n    },\n\n    // Get single leader\n    getLeader: async (id) => {\n        try {\n            const response = await api.get(`/leaders/${id}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching leader:', error);\n            throw error;\n        }\n    },\n\n    // Admin - Create leader with image\n    createLeader: async (leaderData) => {\n        try {\n            const formData = new FormData();\n            formData.append('name', leaderData.name);\n            formData.append('title', leaderData.title);\n            \n            if (leaderData.description) {\n                formData.append('description', leaderData.description);\n            }\n            \n            if (leaderData.icon) {\n                formData.append('icon', leaderData.icon);\n            }\n            \n            if (leaderData.display_order !== undefined) {\n                formData.append('display_order', leaderData.display_order);\n            }\n            \n            if (leaderData.status) {\n                formData.append('status', leaderData.status);\n            }\n            \n            if (leaderData.image) {\n                formData.append('image', leaderData.image);\n            }\n\n            const token = localStorage.getItem('token');\n            const response = await fetch(`${API_URL}/api/leaders`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                },\n                body: formData\n            });\n\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error.error || 'Failed to create leader');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error creating leader:', error);\n            throw error;\n        }\n    },\n\n    // Admin - Update leader with image\n    updateLeader: async (id, leaderData) => {\n        try {\n            const formData = new FormData();\n            formData.append('name', leaderData.name);\n            formData.append('title', leaderData.title);\n            \n            if (leaderData.description) {\n                formData.append('description', leaderData.description);\n            }\n            \n            if (leaderData.icon) {\n                formData.append('icon', leaderData.icon);\n            }\n            \n            if (leaderData.display_order !== undefined) {\n                formData.append('display_order', leaderData.display_order);\n            }\n            \n            if (leaderData.status) {\n                formData.append('status', leaderData.status);\n            }\n            \n            if (leaderData.image) {\n                formData.append('image', leaderData.image);\n            }\n\n            const token = localStorage.getItem('token');\n            const response = await fetch(`${API_URL}/api/leaders/${id}`, {\n                method: 'PUT',\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                },\n                body: formData\n            });\n\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error.error || 'Failed to update leader');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error updating leader:', error);\n            throw error;\n        }\n    },\n\n    // Admin - Delete leader\n    deleteLeader: async (id) => {\n        try {\n            const response = await api.delete(`/leaders/${id}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting leader:', error);\n            throw error;\n        }\n    },\n\n    // Admin - Update display order\n    updateDisplayOrder: async (updates) => {\n        try {\n            const response = await api.put('/leaders/admin/display-order', { updates });\n            return response.data;\n        } catch (error) {\n            console.error('Error updating display order:', error);\n            throw error;\n        }\n    }\n};\n\nexport default leaderService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}