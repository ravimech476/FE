{"ast":null,"code":"// API service that works in browser environment with better error handling\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiClient {\n  constructor() {\n    this.baseURL = API_URL;\n  }\n  getAuthHeader() {\n    const token = localStorage.getItem('token');\n    return token ? {\n      'Authorization': `Bearer ${token}`\n    } : {};\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.getAuthHeader(),\n        ...options.headers\n      }\n    };\n    try {\n      const response = await fetch(url, config);\n\n      // Handle 401 Unauthorized\n      if (response.status === 401) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n        throw new Error('Unauthorized');\n      }\n\n      // Check if response is JSON\n      const contentType = response.headers.get('content-type');\n      let data;\n      if (contentType && contentType.includes('application/json')) {\n        data = await response.json();\n      } else {\n        // If not JSON, try to read as text\n        const text = await response.text();\n        console.error('Non-JSON response:', text);\n        data = {\n          error: text || 'Server error'\n        };\n      }\n      if (!response.ok) {\n        throw {\n          response: {\n            data,\n            status: response.status\n          }\n        };\n      }\n\n      // Return in axios-like format\n      return {\n        data\n      };\n    } catch (error) {\n      console.error('API Error:', error);\n\n      // If already formatted, return as is\n      if (error.response) {\n        throw error;\n      }\n\n      // Format other errors\n      throw {\n        response: {\n          data: {\n            error: error.message || 'Network error'\n          },\n          status: 500\n        }\n      };\n    }\n  }\n  async get(endpoint, config = {}) {\n    const queryString = config.params ? new URLSearchParams(config.params).toString() : '';\n    const url = queryString ? `${endpoint}?${queryString}` : endpoint;\n    return this.request(url, {\n      method: 'GET'\n    });\n  }\n  async post(endpoint, data = {}) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n  async put(endpoint, data = {}) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  }\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    });\n  }\n}\nconst api = new ApiClient();\nexport default api;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","ApiClient","constructor","baseURL","getAuthHeader","token","localStorage","getItem","request","endpoint","options","url","config","headers","response","fetch","status","removeItem","window","location","href","Error","contentType","get","data","includes","json","text","console","error","ok","message","queryString","params","URLSearchParams","toString","method","post","body","JSON","stringify","put","delete","api"],"sources":["D:/PROJECTS/FE/src/services/api.js"],"sourcesContent":["// API service that works in browser environment with better error handling\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass ApiClient {\n    constructor() {\n        this.baseURL = API_URL;\n    }\n\n    getAuthHeader() {\n        const token = localStorage.getItem('token');\n        return token ? { 'Authorization': `Bearer ${token}` } : {};\n    }\n\n    async request(endpoint, options = {}) {\n        const url = `${this.baseURL}${endpoint}`;\n        \n        const config = {\n            ...options,\n            headers: {\n                'Content-Type': 'application/json',\n                ...this.getAuthHeader(),\n                ...options.headers,\n            },\n        };\n\n        try {\n            const response = await fetch(url, config);\n            \n            // Handle 401 Unauthorized\n            if (response.status === 401) {\n                localStorage.removeItem('token');\n                localStorage.removeItem('user');\n                window.location.href = '/login';\n                throw new Error('Unauthorized');\n            }\n\n            // Check if response is JSON\n            const contentType = response.headers.get('content-type');\n            let data;\n            \n            if (contentType && contentType.includes('application/json')) {\n                data = await response.json();\n            } else {\n                // If not JSON, try to read as text\n                const text = await response.text();\n                console.error('Non-JSON response:', text);\n                data = { error: text || 'Server error' };\n            }\n            \n            if (!response.ok) {\n                throw { response: { data, status: response.status } };\n            }\n            \n            // Return in axios-like format\n            return { data };\n        } catch (error) {\n            console.error('API Error:', error);\n            \n            // If already formatted, return as is\n            if (error.response) {\n                throw error;\n            }\n            \n            // Format other errors\n            throw { \n                response: { \n                    data: { error: error.message || 'Network error' }, \n                    status: 500 \n                } \n            };\n        }\n    }\n\n    async get(endpoint, config = {}) {\n        const queryString = config.params ? new URLSearchParams(config.params).toString() : '';\n        const url = queryString ? `${endpoint}?${queryString}` : endpoint;\n        return this.request(url, { method: 'GET' });\n    }\n\n    async post(endpoint, data = {}) {\n        return this.request(endpoint, {\n            method: 'POST',\n            body: JSON.stringify(data),\n        });\n    }\n\n    async put(endpoint, data = {}) {\n        return this.request(endpoint, {\n            method: 'PUT',\n            body: JSON.stringify(data),\n        });\n    }\n\n    async delete(endpoint) {\n        return this.request(endpoint, {\n            method: 'DELETE',\n        });\n    }\n}\n\nconst api = new ApiClient();\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}